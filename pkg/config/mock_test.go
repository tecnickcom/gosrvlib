// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Vonage/gosrvlib/pkg/config (interfaces: Viper)
//
// Generated by this command:
//
//	mockgen -package config -destination ./mock_test.go . Viper
//

// Package config is a generated GoMock package.
package config

import (
	io "io"
	reflect "reflect"

	pflag "github.com/spf13/pflag"
	viper "github.com/spf13/viper"
	gomock "go.uber.org/mock/gomock"
)

// MockViper is a mock of Viper interface.
type MockViper struct {
	ctrl     *gomock.Controller
	recorder *MockViperMockRecorder
	isgomock struct{}
}

// MockViperMockRecorder is the mock recorder for MockViper.
type MockViperMockRecorder struct {
	mock *MockViper
}

// NewMockViper creates a new mock instance.
func NewMockViper(ctrl *gomock.Controller) *MockViper {
	mock := &MockViper{ctrl: ctrl}
	mock.recorder = &MockViperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViper) EXPECT() *MockViperMockRecorder {
	return m.recorder
}

// AddConfigPath mocks base method.
func (m *MockViper) AddConfigPath(in string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConfigPath", in)
}

// AddConfigPath indicates an expected call of AddConfigPath.
func (mr *MockViperMockRecorder) AddConfigPath(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConfigPath", reflect.TypeOf((*MockViper)(nil).AddConfigPath), in)
}

// AddRemoteProvider mocks base method.
func (m *MockViper) AddRemoteProvider(provider, endpoint, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteProvider", provider, endpoint, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteProvider indicates an expected call of AddRemoteProvider.
func (mr *MockViperMockRecorder) AddRemoteProvider(provider, endpoint, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteProvider", reflect.TypeOf((*MockViper)(nil).AddRemoteProvider), provider, endpoint, path)
}

// AddSecureRemoteProvider mocks base method.
func (m *MockViper) AddSecureRemoteProvider(provider, endpoint, path, secretkeyring string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecureRemoteProvider", provider, endpoint, path, secretkeyring)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecureRemoteProvider indicates an expected call of AddSecureRemoteProvider.
func (mr *MockViperMockRecorder) AddSecureRemoteProvider(provider, endpoint, path, secretkeyring any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecureRemoteProvider", reflect.TypeOf((*MockViper)(nil).AddSecureRemoteProvider), provider, endpoint, path, secretkeyring)
}

// AllKeys mocks base method.
func (m *MockViper) AllKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AllKeys indicates an expected call of AllKeys.
func (mr *MockViperMockRecorder) AllKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllKeys", reflect.TypeOf((*MockViper)(nil).AllKeys))
}

// AutomaticEnv mocks base method.
func (m *MockViper) AutomaticEnv() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AutomaticEnv")
}

// AutomaticEnv indicates an expected call of AutomaticEnv.
func (mr *MockViperMockRecorder) AutomaticEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutomaticEnv", reflect.TypeOf((*MockViper)(nil).AutomaticEnv))
}

// BindEnv mocks base method.
func (m *MockViper) BindEnv(input ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range input {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BindEnv", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindEnv indicates an expected call of BindEnv.
func (mr *MockViperMockRecorder) BindEnv(input ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindEnv", reflect.TypeOf((*MockViper)(nil).BindEnv), input...)
}

// BindPFlag mocks base method.
func (m *MockViper) BindPFlag(key string, flag *pflag.Flag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindPFlag", key, flag)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindPFlag indicates an expected call of BindPFlag.
func (mr *MockViperMockRecorder) BindPFlag(key, flag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindPFlag", reflect.TypeOf((*MockViper)(nil).BindPFlag), key, flag)
}

// Get mocks base method.
func (m *MockViper) Get(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockViperMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockViper)(nil).Get), key)
}

// ReadConfig mocks base method.
func (m *MockViper) ReadConfig(in io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockViperMockRecorder) ReadConfig(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockViper)(nil).ReadConfig), in)
}

// ReadInConfig mocks base method.
func (m *MockViper) ReadInConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInConfig indicates an expected call of ReadInConfig.
func (mr *MockViperMockRecorder) ReadInConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInConfig", reflect.TypeOf((*MockViper)(nil).ReadInConfig))
}

// ReadRemoteConfig mocks base method.
func (m *MockViper) ReadRemoteConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRemoteConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadRemoteConfig indicates an expected call of ReadRemoteConfig.
func (mr *MockViperMockRecorder) ReadRemoteConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRemoteConfig", reflect.TypeOf((*MockViper)(nil).ReadRemoteConfig))
}

// SetConfigName mocks base method.
func (m *MockViper) SetConfigName(in string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigName", in)
}

// SetConfigName indicates an expected call of SetConfigName.
func (mr *MockViperMockRecorder) SetConfigName(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigName", reflect.TypeOf((*MockViper)(nil).SetConfigName), in)
}

// SetConfigType mocks base method.
func (m *MockViper) SetConfigType(in string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigType", in)
}

// SetConfigType indicates an expected call of SetConfigType.
func (mr *MockViperMockRecorder) SetConfigType(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigType", reflect.TypeOf((*MockViper)(nil).SetConfigType), in)
}

// SetDefault mocks base method.
func (m *MockViper) SetDefault(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefault", key, value)
}

// SetDefault indicates an expected call of SetDefault.
func (mr *MockViperMockRecorder) SetDefault(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefault", reflect.TypeOf((*MockViper)(nil).SetDefault), key, value)
}

// SetEnvPrefix mocks base method.
func (m *MockViper) SetEnvPrefix(in string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEnvPrefix", in)
}

// SetEnvPrefix indicates an expected call of SetEnvPrefix.
func (mr *MockViperMockRecorder) SetEnvPrefix(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnvPrefix", reflect.TypeOf((*MockViper)(nil).SetEnvPrefix), in)
}

// Unmarshal mocks base method.
func (m *MockViper) Unmarshal(rawVal any, opts ...viper.DecoderConfigOption) error {
	m.ctrl.T.Helper()
	varargs := []any{rawVal}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unmarshal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockViperMockRecorder) Unmarshal(rawVal any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{rawVal}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockViper)(nil).Unmarshal), varargs...)
}
